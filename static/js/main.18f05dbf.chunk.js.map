{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Info","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","variant","color","gutterBottom","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","image","src","alt","Cards","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18f05dbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1fO27\",\"card\":\"Cards_card__SJfAB\",\"infected\":\"Cards_infected__32eyP\",\"recovered\":\"Cards_recovered__13OOC\",\"deaths\":\"Cards_deaths__kSZhi\"};","import React from 'react';\r\nimport {Card, CardContent, Grid, Typography} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return (\r\n            <div className={'tc dib br3 pa3 ma2 grow bw2 shadow-5'}>\r\n                <h1>LOADING</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography variant={'h4'} color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            Number of active cases of COVID-19.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography variant={\"h4\"} color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            Number of recoveries from COVID-19.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography variant={'h4'} color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            Number of deaths caused by COVID-19.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\nexport default Info;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Bar, Line} from 'react-chartjs-2';\r\n\r\nimport {fetchDailyData} from '../../api';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchMyAPI = async () => {\r\n            const initialDailyData = await fetchDailyData();\r\n\r\n            setDailyData(initialDailyData);\r\n        };\r\n\r\n        fetchMyAPI();\r\n    }, []);\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                            data: [confirmed.value, recovered.value, deaths.value],\r\n                        },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Showing Status for ${country} Powered by LearningTools` },\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n    const lineChart = (\r\n        dailyData[0] ? (\r\n            <Line\r\n                data={{\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map((data) => data.confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true,\r\n                    }, {\r\n                        data: dailyData.map((data) => data.deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true,\r\n                    },\r\n                    ],\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {FormControl, NativeSelect} from '@material-ui/core';\r\n\r\nimport {fetchCountries} from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setCountries(await fetchCountries());\r\n        };\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default Countries;\r\n","import React from 'react';\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport {fetchData} from './api/';\r\nimport styles from './App.module.css';\r\nimport './App.css';\r\nimport image from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const data = await fetchData();\r\n\r\n        this.setState({ data });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const data = await fetchData(country);\r\n\r\n        this.setState({ data, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div>\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__23rSf\",\"image\":\"App_image__UqPRx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3P2mG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3QJJG\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}